steps:
  # Step 0: Create directories and set permissions
  - name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        mkdir -p /workspace/cucumber-report && chmod 777 /workspace/cucumber-report
    id: 'Create Directory and Set Permissions'

  # Step 1: Clone the repository
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', 'https://github.com/pavigodj/playwright_gcloud.git', '/workspace/repo']
    id: 'Clone Repository'

  # Step 2: Debug: Verify cloned repository structure
  # This step will show the structure of the cloned repo to help with debugging.
  - name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Listing contents of /workspace:"
        ls -la /workspace
        echo "Listing contents of /workspace/repo:"
        ls -la /workspace/repo
    id: 'Verify Repo Structure'

  # Step 3: Build Docker Image with necessary tools and libraries for Cucumber
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/playwright-cucumber',
      '-f', '/workspace/repo/Dockerfile',  # Specify the path to your Dockerfile
      '/workspace/repo'  # Set the build context to the repo directory
    ]
    id: 'Build Docker Image'

  # Step 4: Run Cucumber tests inside the Docker container
  - name: 'gcr.io/$PROJECT_ID/playwright-cucumber'  # Use the image built in the previous step
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verifying contents of /workspace/repo inside Docker container:"
        ls -la /workspace/repo
        cd /workspace/repo
        if [ -f package.json ]; then
          echo "package.json found, proceeding with npm install"
          npm install
          npm run test  # Replace 'npm run test' with your specific command to run Playwright with Cucumber
        else
          echo "package.json not found, exiting."
          exit 1
        fi
    id: 'Run Cucumber Tests'

  # Debugging Step: List Directory Contents
  - name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'ls -la /workspace && ls -la /workspace/cucumber-report && chmod -R 777 /workspace/cucumber-report && chown -R root:root /workspace/cucumber-report'
    id: 'Debug Cucumber Report Directory'

  # Step 5: Generate Cucumber HTML Report
  # Assuming you use a report generator like cucumber-html-reporter in your Docker container
  - name: 'gcr.io/$PROJECT_ID/playwright-cucumber'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npx cucumber-html-reporter --inputDir /workspace/repo/cucumber-json --output /workspace/cucumber-report  # Adjust command based on your setup
    id: 'Generate Cucumber Report'

  # Step 6: Upload Cucumber Report to GCS
  - name: 'gcr.io/cloud-builders/gsutil'
    args:
      - '-m'
      - 'cp'
      - '-r'
      - '/workspace/cucumber-report'
      - 'gs://playwright_logs/cucumber-reports'
    id: 'Upload Cucumber Report to GCS'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Optional: Choose a machine type for the build

substitutions:
  _BUCKET_NAME: 'playwright_logs'  # Replace with your GCS bucket name

timeout: '900s'
